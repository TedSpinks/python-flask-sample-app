version: '1.0'
stages:
  - checkout
  - build
  - test
  - upload
  - deploy-pr-test
  - cleanup-pr-test

steps:

  main_clone:
    title: Cloning main repository...
    stage: checkout
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'

  flaskr_docker_image:
    title: Building Flaskr Docker Image
    stage: build
    type: build
    image_name: flaskr
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    dockerfile: Dockerfile
    disable_push: true

  parallel_tests:
    type: parallel
    stage: test
    fail_fast: false  # Process failures after test report is uploaded
    steps:
      linting:
        title: Running Linting Tests (ignore)
        image: '${{flaskr_docker_image}}'
        fail_fast: false
        commands:
          - pip install pytest-pylint
          - pytest --pylint
      unit_tests:
        title: Running Unit tests
        image: '${{flaskr_docker_image}}'
        commands:
          - pip install pytest allure-pytest
          - mkdir -p $CF_VOLUME_PATH/allure-results
          - pytest --alluredir=$CF_VOLUME_PATH/allure-results

  upload_report:
    title: Upload Allure Unit Test Report
    stage: test
    type: test-reporting
    fail_fast: true
    working_directory: '${{CF_VOLUME_PATH}}/'
    arguments:
      allure_dir: allure-results
      bucket_name: '${{TEST_BUCKET_NAME}}'
      storage_integration: '${{TEST_STORAGE_NAME}}'
      branch: '${{CF_BRANCH_TAG_NORMALIZED}}'
      clear_test_report: true

  check_for_test_failures:
    title: Checking test results for failures
    stage: test
    image: alpine
    commands:
      - 'echo Result of Linting was: ${{steps.linting.result}}'
      - 'echo Result of Unit Testing was: ${{steps.unit_tests.result}}'
      - 'exit 1'
    when:
      steps:
        any:
#           - name: linting  # Let's give the devs some time to fix all their linting errors
#             on:
#               - failure
          - name: unit_tests
            on:
              - failure

  store_docker_image:
    title: Pushing Flaskr image to Docker Registry
    stage: upload
    type: push
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    candidate: '${{flaskr_docker_image}}'
    image_name: '${{IMAGE_PREFIX}}flaskr'
    registry: '${{REGISTRY_NAME}}'

  prep_for_enrich_image:
    title: Gather image info
    stage: upload
    image: alpine
    commands:
      - echo "${{steps.store_docker_image.imageId}}"
      - export IMAGE=${{steps.store_docker_image.imageId}}
      - cf_export IMAGE
      - echo $IMAGE

  enrich_image:
    title: Enrich image with annotations
    stage: upload
    type: image-enricher
    arguments:
      IMAGE: '${{IMAGE}}'
      BRANCH: '${{CF_BRANCH}}'
      REPO: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
      GIT_PROVIDER_NAME: '${{GIT_PROVIDER_NAME}}'  # defined as a trigger variable
    hooks:
      on_fail:
        metadata:
          set:
            - '${{steps.store_docker_image.imageId}}':
              - CF_QUALITY: false

  store_helm_chart:
    title: Pushing Helm chart to Codefresh repo
    stage: upload
    type: helm
    working_directory: '${{main_clone}}'  # Req'd field (not well documented)
    arguments:
      action: push
      chart_name: charts/python
      helm_version: '${{HELM_VER}}'
      kube_context: '${{KUBE_CTX_TEST_FEATURE}}'

  simulate_pr_for_manual_runs:
    title: Simulate PR number 9000 during manual runs
    stage: deploy-pr-test
    image: alpine
    commands:
      - cf_export CF_PULL_REQUEST_NUMBER=9000
    when:
      condition:
        all:
          whenVarIsMissing: 'includes("${{CF_PULL_REQUEST_NUMBER}}", "{{CF_PULL_REQUEST_NUMBER}}") == true'

  deploy_temp_helm_release:
    title: Deploying Helm Chart to temp Release for PR Testing
    stage: deploy-pr-test
    type: helm
    arguments:
      action: install
      chart_name: python
      release_name: 'flaskr-pr-${{CF_PULL_REQUEST_NUMBER}}'
      helm_version: '${{HELM_VER}}'
      kube_context: '${{KUBE_CTX_TEST_FEATURE}}'
      namespace: '${{KUBE_NS_TEST_FEATURE}}'
      cmd_ps: '--debug'  # Print rendered templates, etc.
      custom_values:
        - 'buildID=${{CF_BUILD_ID}}'
        - 'image_pullPolicy=Always'
        - 'image_repository=${{REGISTRY_URL}}/${{IMAGE_PREFIX}}flaskr'
        - 'image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
        - 'image_pullSecret=${{IMAGE_PULL_SECRET}}' # Create this when you create the ns

  test_helm_release:
    title: Running Helm Tests on the temp Release
    stage: deploy-pr-test
    image: 'codefresh/kube-helm:${{HELM_VER}}'
    commands:
      - echo Changing to context "$KUBE_CTX_TEST_FEATURE" and ns "$KUBE_NS_TEST_FEATURE"
      - kubectl config use-context $KUBE_CTX_TEST_FEATURE
      - kubectl config set-context --current --namespace=$KUBE_NS_TEST_FEATURE
      - echo Testing Helm Release "flaskr-pr-$CF_PULL_REQUEST_NUMBER"
      - helm test flaskr-pr-$CF_PULL_REQUEST_NUMBER
    hooks:
      on_success:
        metadata:
          set:
            - '${{steps.store_docker_image.imageId}}':
              - CF_QUALITY: true
      on_fail:
        metadata:
          set:
            - '${{steps.store_docker_image.imageId}}':
              - CF_QUALITY: false

  wait_for_manual_pr_testing:
    type: pending-approval
    stage: cleanup-pr-test
    title: After your PR testing, Cleanup the PR test env. This
    timeout:
      duration: 48  # hours
      finalState: approved

  cleanup_temp_helm_release:
    title: Cleanup of temp Helm Release after PR testing
    stage: cleanup-pr-test
    image: 'codefresh/kube-helm:${{HELM_VER}}'
    commands:
      - echo Changing to context "$KUBE_CTX_TEST_FEATURE" and ns "$KUBE_NS_TEST_FEATURE"
      - kubectl config use-context $KUBE_CTX_TEST_FEATURE
      - kubectl config set-context --current --namespace=$KUBE_NS_TEST_FEATURE
      - echo Removing Helm Release "flaskr-pr-$CF_PULL_REQUEST_NUMBER"
      - helm uninstall flaskr-pr-$CF_PULL_REQUEST_NUMBER
